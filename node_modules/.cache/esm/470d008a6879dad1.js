let chalk,fs,ncp,path,promisify,execa,Listr,projectInstall;_687‍.x([["createProject",()=>createProject]]);_687‍.w("chalk",[["default",["chalk"],function(v){chalk=v}]]);_687‍.w("fs",[["default",["fs"],function(v){fs=v}]]);_687‍.w("ncp",[["default",["ncp"],function(v){ncp=v}]]);_687‍.w("path",[["default",["path"],function(v){path=v}]]);_687‍.w("util",[["promisify",["promisify"],function(v){promisify=v}]]);_687‍.w("execa",[["default",["execa"],function(v){execa=v}]]);_687‍.w("listr",[["default",["Listr"],function(v){Listr=v}]]);_687‍.w("pkg-install",[["projectInstall",["projectInstall"],function(v){projectInstall=v}]]);








const access = promisify(fs.access);
const copy = promisify(ncp);

async function copyTemplate(options) {
  return copy(options.templateDirectory, options.targetDirectory, {
    clobber: false,
  });
}

async function initGit(options) {
  const result = await execa("git", ["init"], {
    cwd: options.targetDirectory,
  });
  if (result.failed) {
    return Promise.reject(new Error("Failed to initialize git"));
  }
  return;
}

       async function createProject(options) {
  options = {
    ...options,
    targetDirectory: options.targetDirectory || process.cwd(),
  };

  const currentFileUrl = _687‍._.meta.url;
  const templateDir = path.resolve(
    new URL(currentFileUrl).pathname,
    "../../templates",
    options.template.toLowerCase()
  );
  options.templateDirectory = templateDir;

  try {
    await access(templateDir, fs.constants.R_OK);
  } catch (err) {
    _687‍.g.console.error("%s Invalid template name", chalk.red.bold("ERROR"));
    process.exit(1);
  }

  const tasks = new Listr([
    {
      title: "Copy project files",
      task: () => copyTemplate(options),
    },
    {
      title: "Initialize Git",
      task: () => initGit(options),
      enabled: () => options.git,
    },
    {
      title: "Installing dependencies",
      task: () =>
        projectInstall({
          cwd: options.targetDirectory,
        }),
    },
  ]);

  await tasks.run();
  _687‍.g.console.log("%s Project ready", chalk.green.bold("DONE"));
  return true;
}
